###############################################################################
################################ SPRING MVC ###################################
###############################################################################

> Model, View and Controller and it is a design pattern
> Model: Models are responsible for managing the application's data, business logic and business rules
> View: The view is an output representation of information, for example displaying information or reports
    to the user either as a web form or as charts
> Controller: The controller is responsible for invoking Models to perform business logic and then updating
    the view based on the Models output.

> Tenemos un central Servlet, conocido como DispatcherServlet, que proporciona un algoritmo compartido
    para el procesamiento de solicitudes.
    Controladores que manejan las solicitudes por lo que este diseño es flexible y permite diferentes
    flujos de trabajo en los que el DispatcherServlet espera un WebApplicationContext (contexto de aplicación web),
    que es una extensión de un plain ApplicationContext, para su propia configuración.
> DispatcherServlet delega beans especiales para procesar solicitudes y render las respuestas apropiadas.
> Con el WebApplicationContext hay algunos beans que se registran automáticamente
> With Spring MVC we can use different view technologies to render web pages.
    For example Groovy Markup, Freemarker, and Thymeleaf.
> Spring MVC also integrates with other web frameworks

############################## SIMPLE CONTROLLER ##############################

> Spring MVC is designed around the DispatcherServlet wich plays the role of Front Controller.
> It receives all of the requests for your application

> We can map requests to method in classes annotated with @Controller.
    Those classes are known as annotated controllers or controller classes.

> The @RequestMapping annotation is used to map requests to controller methods, variants:
    @GetMapping
    @PostMapping
    @PutMapping
    @DeleteMapping
    @PatchMapping

###############################################################################
################################ JAR VS WAR ###################################
###############################################################################

Estos archivos son simplemente archivos comprimidos con la herramienta java jar.
Estos archivos se crean para diferentes propósitos. Aquí está la descripción de estos archivos:

> Archivos .jar: los archivos .jar contienen bibliotecas, recursos y archivos
de accesorios como archivos de propiedades.
> Archivos .war: el archivo war contiene la aplicación web que se puede implementar
en cualquier contenedor de servlet / jsp. El archivo .war contiene jsp, html, javascript
y otros archivos necesarios para el desarrollo de aplicaciones web.

###############################################################################
########################### EAR VS WAR VS JAR #################################
###############################################################################

La mayor diferencia entre los archivos JAR, WAR y EAR es el hecho de que están dirigidos a
diferentes entornos.
> Un archivo EAR requiere un servidor de aplicaciones totalmente compatible con la plataforma Java,
Enterprise Edition (Java EE) o Jakarta Enterprise Edition (EE), como WebSphere o JBoss, para ejecutarse.
> Un archivo WAR solo requiere un servidor de aplicaciones compatible con Java EE Web Profile para ejecutarse.
> Un archivo JAR solo requiere una instalación Java

También hay restricciones y requisitos internos que se aplican a los archivos EAR, WAR y JAR:
> Los archivos EAR deben tener un archivo application.xml contenido dentro de una carpeta
    llamada META-INF.
> Un archivo WAR requiere un archivo web.xml contenido en una carpeta WEB-INF.
> Los archivos JAR no tienen ninguno de estos requisitos.

###############################################################################
################################ MAVEN WAR ####################################
###############################################################################

WAR: Web Application Archive

###############################################################################
############################## MAVEN CARGO ####################################
###############################################################################

> Es un plugin (como install, clean, war que aparece en la sección MAVEN)
> Plugin que permite administrar e implementar aplicaciones en una variedad de servidores de aplicaciones.
> Este complemento nos ayudará a desarrollar rápidamente una aplicación sin necesidad de
    instalar un contenedor web standalone(independiente) de tomcat, lo cual es excelente ya que
    implementar el tomcat independiente no siempre es un proceso fácil o trivial que puede ser
    complicado para que funcione ahora.
> Se especifica si se debe implementar incorporado local o Tomcat remoto, en nuestro caso estamos
    usando Embedded porque es la configuración más simple para comenzar a trabajar y eso es
    esencialmente lo que necesitamos hacer con esta pequeña configuración que podemos
    implementar y comenzar Tomcat con un clic.

    <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>1.7.12</version>
        <configuration>
            <container>
                <containerId>tomcat9x</containerId>
                <type>embedded</type>
            </container>
        </configuration>
    </plugin>

> mvn cargo:run : run webapp